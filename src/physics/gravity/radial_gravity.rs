use bevy::prelude::*; use bevy_rapier2d::prelude::*; use crate::core::components::Ball; use crate::core::config::GameConfig; use crate::core::system::system_order::PrePhysicsSet;
pub struct RadialGravityPlugin; impl Plugin for RadialGravityPlugin { fn build(&self, app: &mut App) { app.add_systems(Update, apply_radial_gravity.in_set(PrePhysicsSet)); } }
fn apply_radial_gravity(cfg: Res<GameConfig>, mut q: Query<(&Transform, &mut Velocity), With<Ball>>, time: Res<Time>) { let g = cfg.gravity.y.abs(); if g <= 0.0 { return; } let dt = time.delta_secs(); for (transform, mut vel) in q.iter_mut() { let pos = transform.translation.truncate(); vel.linvel += radial_gravity_delta(g, dt, pos); } }
fn radial_gravity_delta(g: f32, dt: f32, pos: Vec2) -> Vec2 { if g <= 0.0 || dt <= 0.0 { return Vec2::ZERO; } if pos.length_squared() < 1e-6 { return Vec2::ZERO; } let dir_to_center = -pos.normalize(); dir_to_center * g * dt }
